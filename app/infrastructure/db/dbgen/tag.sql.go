// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: tag.sql

package dbgen

import (
	"context"
	"strings"
)

const findByNames = `-- name: FindByNames :many
SELECT id, name
FROM tags
WHERE name IN (/*SLICE:names*/?)
`

type FindByNamesRow struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) FindByNames(ctx context.Context, names []string) ([]FindByNamesRow, error) {
	query := findByNames
	var queryParams []interface{}
	if len(names) > 0 {
		for _, v := range names {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:names*/?", strings.Repeat(",?", len(names))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:names*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindByNamesRow{}
	for rows.Next() {
		var i FindByNamesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertTag = `-- name: UpsertTag :exec
INSERT INTO tags (id,
                  name,
                  created_at,
                  updated_at)
VALUES (?,
        ?,
        NOW(),
        NOW()) ON DUPLICATE KEY
UPDATE
    name = ?,
    updated_at = NOW()
`

type UpsertTagParams struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpsertTag(ctx context.Context, arg UpsertTagParams) error {
	_, err := q.db.ExecContext(ctx, upsertTag, arg.ID, arg.Name, arg.Name)
	return err
}
